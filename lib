using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;

namespace logiclib
{
    public static class TruthTables
    {
        private static List<string> _operandValueCombinations = new List<string>();
        public static void GenerateTruthTable(Statement statement)
        {

            List<string> variables = new List<string>();
            foreach (string token in statement.RPN)
            {
                if (Regex.IsMatch(token, @"^[a-zA-Z]+$") && !variables.Contains(token))
                {
                    variables.Add(token);
                }
            }
           
            List<Dictionary<string, bool>> myDicts = new List<Dictionary<string, bool>>();
            int[] arr = new int[variables.Count];

            generateAllBinaryStrings(variables.Count, arr, 0);
            foreach (string combo in _operandValueCombinations)
            {
                int idx = 0;
                Dictionary<string, bool> temp = new Dictionary<string, bool>();
                foreach (char c in combo)
                {

                    switch (c)
                    {
                        case '0':

                            temp.Add(variables[idx], false);
                            break;
                        case '1':
                            temp.Add(variables[idx], true);
                            break;
                    }
                    idx++;

                }
                myDicts.Add(temp);
            }
            foreach (var dict in myDicts)
            {
                foreach (var kvp in dict)
                {
                    Console.Write(kvp);
                }
                Console.Write($"result: {statement.GetValue(dict)}");
                Console.WriteLine("\n");
            }
        }
        private static void addToCombos(int[] arr, int n)
        {
            string comb = "";
            for (int i = 0; i < n; i++)
            {
                comb += arr[i];
            }
            _operandValueCombinations.Add(comb);
        }
        private static void generateAllBinaryStrings(int n,
                                   int[] arr, int i)
        {
            if (i == n)
            {
                addToCombos(arr, n);
                return;
            }

            // First assign "0" at ith position
            // and try for all other permutations
            // for remaining positions
            arr[i] = 0;
            generateAllBinaryStrings(n, arr, i + 1);

            // And then assign "1" at ith position
            // and try for all other permutations
            // for remaining positions
            arr[i] = 1;
            generateAllBinaryStrings(n, arr, i + 1);
        }

    }
    public class Statement
    {
        private static Dictionary<string, int> _precedence = new Dictionary<string, int>() { ["¬"] = 4, ["&"] = 3, ["|"] = 2, ["->"] = 1, ["<->"] = 1 };
        private List<string> _tokens;
        public List<string> RPN;
        private bool _statementInvalid = false;
        public Statement(string str)
        {
            List<string> tokens = new List<string>();
            foreach (char c in str)
            {
                if (Char.IsLetter(c) || _precedence.ContainsKey(c.ToString()))
                {
                    tokens.Add(c.ToString());
                }
                else
                {
                    switch (c)
                    {
                        case '!':
                            tokens.Add("¬");
                            break;
                        case '>':
                            tokens.Add("->");
                            break;
                        case '=':
                            tokens.Add("<->");
                            break;
                        default:
                            Console.WriteLine("your statement was invalid");
                            return;
                    }
                }
            }
            
           _tokens = tokens;
           RPN = getRPN();
          if (!isValidRPN())
          {
            Console.WriteLine("your statement was invalid");
           return;
          }
          
            
        }
        public List<string> getRPN()
        {
            List<string> output = new List<string>();
            Stack<string> operators = new Stack<string>();
            foreach (string token in _tokens)
            {
                if (!_precedence.ContainsKey(token) && token != "(" && token != ")")
                {
                    output.Add(token);
                }
                else
                {
                    if (token == "(")
                    {
                        operators.Push(token);
                    }
                    else if (token == ")")
                    {
                        while (operators.Count > 0)
                        {
                            string stackOperator = operators.Pop();
                            if (stackOperator == "(")
                            {
                                break;
                            }
                            output.Add(stackOperator);
                        }
                    }
                    else
                    {
                        while (operators.Count > 0)
                        {
                            string stackOperator = operators.Peek();
                            if (stackOperator == "(")
                            {
                                break;
                            }
                            if (_precedence[stackOperator] > _precedence[token])
                            {
                                output.Add(operators.Pop());
                            }
                            else
                            {
                                break;
                            }
                        }
                        operators.Push(token);
                    }



                }

            }
            foreach (string op in operators)
            {
                output.Add(op);
            }

            foreach (string s in output)
            {
                Debug.WriteLine(s);
            }
            return output;


        }
        private static bool decrease(ref int counter, int n)
        {
            for (int i = 0; i < n; i++)
            {
                counter--;
                if (counter < 0)
                {
                    return false;
                }
            }
            return true;

        }

        private bool isValidRPN()
        {

            int counter = 0;
            foreach (string token in RPN)
            {
                if (Regex.IsMatch(token, @"^[a-zA-Z]+$"))
                {
                    counter++;
                }
                else if (_precedence.ContainsKey(token) && token != "¬")
                {
                    if (!decrease(ref counter, 2))
                    {
                        return false;
                    }
                    counter++;
                }
                else if (token == "¬")
                {
                    if (!decrease(ref counter, 1))
                    {
                        return false;
                    }
                    counter++;
                }
            }
            return (counter == 1);
        }
        public bool PlayMove(bool trueOrFalse)
        {
            List<string> variables = new List<string>();
            Dictionary<string, bool> myDict = new Dictionary<string, bool>();
            foreach (string token in RPN)
            {
                if (Regex.IsMatch(token, @"^[a-zA-Z]+$") && !variables.Contains(token))
                {
                    variables.Add(token);
                }
            }
            foreach (string variable in variables)
            {
                Console.WriteLine($"{variable}: t or f?");
                switch (Console.ReadLine())
                {
                    case "t":
                        myDict.Add(variable, true);
                        break;
                    case "f":
                        myDict.Add(variable, true);
                        break;
                }
            }
            if (GetValue(myDict) == trueOrFalse)
            {
                if (_statementInvalid)
                {
                    Console.WriteLine("statement was invalid");
                }
                return true;
            }
            return false;
        }
        public bool GetValue(Dictionary<string, bool> variables)
        {

            Stack<bool> boolStack = new Stack<bool>();
            foreach (string token in RPN)
            {
                if (!_precedence.ContainsKey(token))
                {
                    boolStack.Push(variables[token]);
                }
                else
                {

                    try
                    {
                        if (token == "¬")
                        {
                            boolStack.Push(!boolStack.Pop());
                        }
                        else if (token == "|")
                        {
                            bool second = boolStack.Pop();
                            bool first = boolStack.Pop();
                            boolStack.Push(first | second);
                        }
                        else if (token == "&")
                        {
                            bool second = boolStack.Pop();
                            bool first = boolStack.Pop();
                            boolStack.Push(first & second);
                        }
                        else if (token == "->")
                        {
                            bool second = boolStack.Pop();
                            bool first = boolStack.Pop();
                            boolStack.Push(!first | second);
                        }
                        else if (token == "<->")
                        {
                            bool second = boolStack.Pop();
                            bool first = boolStack.Pop();
                            boolStack.Push(first == second);

                        }
                    }
                    catch (InvalidOperationException)
                    {
                        _statementInvalid = true;
                        return false;
                    }

                }
            }
            return boolStack.FirstOrDefault();
            //go through stack
            //return result;

        }

    }
}
